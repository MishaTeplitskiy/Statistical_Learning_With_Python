{
 "metadata": {
  "name": "",
  "signature": "sha256:314f6f37cf3e41c552b23fa4de2b4d09a812e73bcc588499fd44166e606e2421"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#Building a Language Detector\n",
      "\n",
      "\n",
      "- inspired by http://bugra.github.io/work/notes/2014-12-26/language-detector-via-scikit-learn/"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib.pyplot as plt\n",
      "import pandas as pd\n",
      "import numpy as np"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Example: Language of Tweets"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from IPython.display import Image\n",
      "Image(url='http://i.imgur.com/Kr5sfJ8.png')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<img src=\"http://i.imgur.com/Kr5sfJ8.png\"/>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "<IPython.core.display.Image at 0x2e8ab50>"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##Data Description"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "European Parliament Proceedings corpus\n",
      "- https://language-detection.googlecode.com/git-history/packages/packages/europarl-test.zip\n",
      "- 21 languages, 1000 sentences each \n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##Import data and put it in pandas dataframe"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import codecs\n",
      "lines = codecs.open('europarl.txt', 'r', 'utf-8').readlines()\n",
      "lines = [l.split('\\t') for l in lines]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = pd.DataFrame(lines, columns=['language', 'text'])\n",
      "df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>language</th>\n",
        "      <th>text</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> bg</td>\n",
        "      <td> \"\u0415\u0432\u0440\u043e\u043f\u0430 2020\" \u043d\u0435 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430 \u043d\u043e\u0432 \u043a\u043e\u043d\u043a\u0443\u0440...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> bg</td>\n",
        "      <td> (CS) \u041d\u0430\u0439-\u0433\u043e\u043b\u044f\u043c\u0430\u0442\u0430 \u043d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e\u0441\u0442 \u043d\u0430 \u0441\u0435\u0433\u0430\u0448\u043d\u0430\u0442\u0430...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> bg</td>\n",
        "      <td> (DE) \u0413-\u0436\u043e \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0433-\u043d \u0447\u043b\u0435\u043d \u043d\u0430 \u041a\u043e\u043c\u0438\u0441\u0438\u044f\u0442\u0430, ...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> bg</td>\n",
        "      <td> (DE) \u0413-\u043d \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0431\u0438\u0445 \u0438\u0441\u043a\u0430\u043b \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u043d\u0430 \u0441 \u043a...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> bg</td>\n",
        "      <td> (DE) \u0413-\u043d \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0432\u044a\u043f\u0440\u043e\u0441\u044a\u0442 \u0437\u0430 \u043f\u0440\u0430\u0432\u0430\u0442\u0430 \u043d\u0430 \u0447...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "  language                                               text\n",
        "0       bg  \"\u0415\u0432\u0440\u043e\u043f\u0430 2020\" \u043d\u0435 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430 \u043d\u043e\u0432 \u043a\u043e\u043d\u043a\u0443\u0440...\n",
        "1       bg  (CS) \u041d\u0430\u0439-\u0433\u043e\u043b\u044f\u043c\u0430\u0442\u0430 \u043d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e\u0441\u0442 \u043d\u0430 \u0441\u0435\u0433\u0430\u0448\u043d\u0430\u0442\u0430...\n",
        "2       bg  (DE) \u0413-\u0436\u043e \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0433-\u043d \u0447\u043b\u0435\u043d \u043d\u0430 \u041a\u043e\u043c\u0438\u0441\u0438\u044f\u0442\u0430, ...\n",
        "3       bg  (DE) \u0413-\u043d \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0431\u0438\u0445 \u0438\u0441\u043a\u0430\u043b \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u043d\u0430 \u0441 \u043a...\n",
        "4       bg  (DE) \u0413-\u043d \u043f\u0440\u0435\u0434\u0441\u0435\u0434\u0430\u0442\u0435\u043b, \u0432\u044a\u043f\u0440\u043e\u0441\u044a\u0442 \u0437\u0430 \u043f\u0440\u0430\u0432\u0430\u0442\u0430 \u043d\u0430 \u0447..."
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# how many of each language\n",
      "df.language.value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "hu    1000\n",
        "nl    1000\n",
        "fi    1000\n",
        "ro    1000\n",
        "de    1000\n",
        "da    1000\n",
        "pt    1000\n",
        "pl    1000\n",
        "it    1000\n",
        "bg    1000\n",
        "sv    1000\n",
        "cs    1000\n",
        "sk    1000\n",
        "sl    1000\n",
        "lv    1000\n",
        "lt    1000\n",
        "el    1000\n",
        "en    1000\n",
        "et    1000\n",
        "es    1000\n",
        "fr    1000\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# let's consider just two: english (en) and french (fr)\n",
      "df[df.language=='en'].head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>language</th>\n",
        "      <th>text</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>5000</th>\n",
        "      <td> en</td>\n",
        "      <td>                   (BG) Thank you, Mr President.\\n</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5001</th>\n",
        "      <td> en</td>\n",
        "      <td> (EL) Madam President, I agree and recognise Tu...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5002</th>\n",
        "      <td> en</td>\n",
        "      <td> (FI) Madam President, firstly, I would like to...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5003</th>\n",
        "      <td> en</td>\n",
        "      <td> (FI) Mr President, the Treaty of Lisbon will r...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5004</th>\n",
        "      <td> en</td>\n",
        "      <td> (FR) Madam President, one of the priorities of...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "     language                                               text\n",
        "5000       en                    (BG) Thank you, Mr President.\\n\n",
        "5001       en  (EL) Madam President, I agree and recognise Tu...\n",
        "5002       en  (FI) Madam President, firstly, I would like to...\n",
        "5003       en  (FI) Mr President, the Treaty of Lisbon will r...\n",
        "5004       en  (FR) Madam President, one of the priorities of..."
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_sub = df[df.language.isin(('nl', 'de'))]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##Build classifier"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
      "from sklearn.linear_model import LogisticRegression\n",
      "from sklearn.cross_validation import train_test_split"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 26
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###1. Engineer features we will use to predict"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# vectorizer = TfidfVectorizer(ngram_range=(1,3),\n",
      "# #                              analyzer='char',\n",
      "#                              max_features=50)\n",
      "# #                             use_idf=False)\n",
      "\n",
      "vectorizer = CountVectorizer(max_features=50)\n",
      "\n",
      "\n",
      "X_features = vectorizer.fit_transform(df_sub.text)  # fit_transform() is like calling fit() and then predict()\n",
      "print X_features.shape, type(X_features)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(2000, 50) <class 'scipy.sparse.csr.csr_matrix'>\n"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###2. Split into train and test sets"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y = df_sub.language.values\n",
      "X_train, X_test, y_train, y_test = train_test_split(X_features, y, test_size=0.2, random_state=1)  \n",
      "#setting random_state=0 to make #sure we all get the same answer"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#composition of train and test sets\n",
      "print 'Composition of train set:', np.unique(y_train, return_counts=True)\n",
      "print 'Composition of test set:', np.unique(y_test, return_counts=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Composition of train set: (array([u'de', u'nl'], dtype=object), array([805, 795]))\n",
        "Composition of test set: (array([u'de', u'nl'], dtype=object), array([195, 205]))\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###3. Train model"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "est = LogisticRegression()\n",
      "est.fit(X_train, y_train)\n",
      "y_predicted = est.predict(X_test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###4. Evaluate model"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import metrics\n",
      "print 'Accuracy:', metrics.accuracy_score(y_test, y_predicted)\n",
      "print\n",
      "print metrics.classification_report(y_test, y_predicted)\n",
      "print\n",
      "print 'confusion matrix'\n",
      "print\n",
      "print pd.DataFrame(metrics.confusion_matrix(y_test, y_predicted))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Accuracy: 0.9975\n",
        "\n",
        "             precision    recall  f1-score   support\n",
        "\n",
        "         de       0.99      1.00      1.00       195\n",
        "         nl       1.00      1.00      1.00       205\n",
        "\n",
        "avg / total       1.00      1.00      1.00       400\n",
        "\n",
        "\n",
        "confusion matrix\n",
        "\n",
        "     0    1\n",
        "0  195    0\n",
        "1    1  204\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#Examine the coefficients"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.DataFrame(zip(vectorizer.get_feature_names(), np.transpose(est.coef_[0]))).sort(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>39</th>\n",
        "      <td>    und</td>\n",
        "      <td>-1.547362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>46</th>\n",
        "      <td>    wir</td>\n",
        "      <td>-1.486852</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td>    der</td>\n",
        "      <td>-1.479777</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>28</th>\n",
        "      <td>    ist</td>\n",
        "      <td>-1.329089</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>23</th>\n",
        "      <td>    ich</td>\n",
        "      <td>-1.326624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13</th>\n",
        "      <td>    die</td>\n",
        "      <td>-1.156432</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>44</th>\n",
        "      <td> werden</td>\n",
        "      <td>-1.029817</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td>    das</td>\n",
        "      <td>-1.011625</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td>    den</td>\n",
        "      <td>-0.968402</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>31</th>\n",
        "      <td>  nicht</td>\n",
        "      <td>-0.919749</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>17</th>\n",
        "      <td>   eine</td>\n",
        "      <td>-0.910698</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16</th>\n",
        "      <td>    ein</td>\n",
        "      <td>-0.908800</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>37</th>\n",
        "      <td>    sie</td>\n",
        "      <td>-0.885047</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>20</th>\n",
        "      <td>     es</td>\n",
        "      <td>-0.878007</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>21</th>\n",
        "      <td>    f\u00fcr</td>\n",
        "      <td>-0.844254</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>41</th>\n",
        "      <td>    von</td>\n",
        "      <td>-0.803429</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td>   auch</td>\n",
        "      <td>-0.746625</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>49</th>\n",
        "      <td>     zu</td>\n",
        "      <td>-0.742014</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td>    des</td>\n",
        "      <td>-0.730544</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25</th>\n",
        "      <td>     im</td>\n",
        "      <td>-0.713257</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>30</th>\n",
        "      <td>    mit</td>\n",
        "      <td>-0.688374</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td>    auf</td>\n",
        "      <td>-0.672087</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td>    dem</td>\n",
        "      <td>-0.582598</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td>   dass</td>\n",
        "      <td>-0.581294</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>26</th>\n",
        "      <td>     in</td>\n",
        "      <td> 0.082213</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>19</th>\n",
        "      <td>     er</td>\n",
        "      <td> 0.125060</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>47</th>\n",
        "      <td> worden</td>\n",
        "      <td> 0.343758</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>33</th>\n",
        "      <td>     om</td>\n",
        "      <td> 0.366926</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td>    als</td>\n",
        "      <td> 0.418385</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>29</th>\n",
        "      <td>    met</td>\n",
        "      <td> 0.489734</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td>    aan</td>\n",
        "      <td> 0.571480</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>34</th>\n",
        "      <td>    ook</td>\n",
        "      <td> 0.578846</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>36</th>\n",
        "      <td>   over</td>\n",
        "      <td> 0.712182</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>38</th>\n",
        "      <td>     te</td>\n",
        "      <td> 0.816205</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>40</th>\n",
        "      <td>    van</td>\n",
        "      <td> 0.855471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>42</th>\n",
        "      <td>   voor</td>\n",
        "      <td> 0.887975</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>32</th>\n",
        "      <td>   niet</td>\n",
        "      <td> 0.958746</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>35</th>\n",
        "      <td>     op</td>\n",
        "      <td> 0.975789</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td>   deze</td>\n",
        "      <td> 0.989932</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td>    dit</td>\n",
        "      <td> 1.000753</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>43</th>\n",
        "      <td>     we</td>\n",
        "      <td> 1.071230</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>18</th>\n",
        "      <td>     en</td>\n",
        "      <td> 1.402428</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>48</th>\n",
        "      <td>   zijn</td>\n",
        "      <td> 1.457738</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>27</th>\n",
        "      <td>     is</td>\n",
        "      <td> 1.554142</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td>    dat</td>\n",
        "      <td> 1.559895</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td>    een</td>\n",
        "      <td> 1.568475</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>45</th>\n",
        "      <td>    wij</td>\n",
        "      <td> 1.591995</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>24</th>\n",
        "      <td>     ik</td>\n",
        "      <td> 1.618790</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>22</th>\n",
        "      <td>    het</td>\n",
        "      <td> 1.691473</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td>     de</td>\n",
        "      <td> 2.442768</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "         0         1\n",
        "39     und -1.547362\n",
        "46     wir -1.486852\n",
        "10     der -1.479777\n",
        "28     ist -1.329089\n",
        "23     ich -1.326624\n",
        "13     die -1.156432\n",
        "44  werden -1.029817\n",
        "4      das -1.011625\n",
        "9      den -0.968402\n",
        "31   nicht -0.919749\n",
        "17    eine -0.910698\n",
        "16     ein -0.908800\n",
        "37     sie -0.885047\n",
        "20      es -0.878007\n",
        "21     f\u00fcr -0.844254\n",
        "41     von -0.803429\n",
        "2     auch -0.746625\n",
        "49      zu -0.742014\n",
        "11     des -0.730544\n",
        "25      im -0.713257\n",
        "30     mit -0.688374\n",
        "3      auf -0.672087\n",
        "8      dem -0.582598\n",
        "5     dass -0.581294\n",
        "26      in  0.082213\n",
        "19      er  0.125060\n",
        "47  worden  0.343758\n",
        "33      om  0.366926\n",
        "1      als  0.418385\n",
        "29     met  0.489734\n",
        "0      aan  0.571480\n",
        "34     ook  0.578846\n",
        "36    over  0.712182\n",
        "38      te  0.816205\n",
        "40     van  0.855471\n",
        "42    voor  0.887975\n",
        "32    niet  0.958746\n",
        "35      op  0.975789\n",
        "12    deze  0.989932\n",
        "14     dit  1.000753\n",
        "43      we  1.071230\n",
        "18      en  1.402428\n",
        "48    zijn  1.457738\n",
        "27      is  1.554142\n",
        "6      dat  1.559895\n",
        "15     een  1.568475\n",
        "45     wij  1.591995\n",
        "24      ik  1.618790\n",
        "22     het  1.691473\n",
        "7       de  2.442768"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.metrics import roc_curve, auc\n",
      "y_score = est.fit(X_train, y_train)\n",
      "\n",
      "# Compute ROC curve and ROC area for each class\n",
      "fpr = dict()\n",
      "tpr = dict()\n",
      "roc_auc = dict()\n",
      "fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n",
      "roc_auc[i] = auc(fpr[i], tpr[i])\n",
      "\n",
      "# Compute micro-average ROC curve and ROC area\n",
      "fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_score.ravel())\n",
      "roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n",
      "\n",
      "# Plot of a ROC curve for a specific class\n",
      "plt.figure()\n",
      "plt.plot(fpr[2], tpr[2], label='ROC curve (area = %0.2f)' % roc_auc[2])\n",
      "plt.plot([0, 1], [0, 1], 'k--')\n",
      "plt.xlim([0.0, 1.0])\n",
      "plt.ylim([0.0, 1.05])\n",
      "plt.xlabel('False Positive Rate')\n",
      "plt.ylabel('True Positive Rate')\n",
      "plt.title('Receiver operating characteristic example')\n",
      "plt.legend(loc=\"lower right\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.metrics import roc_curve, auc\n",
      "for i, label in enumerate(np.unique(y_test)):\n",
      "    y_label_test = np.asarray(y_test == label, dtype=int)\n",
      "    proba = est.predict_proba(X_test)\n",
      "    proba_label = proba[:,i]\n",
      "    fpr, tpr, roc_thresholds = roc_curve(y_label_test, proba_label)\n",
      "\n",
      "    "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 45,
       "text": [
        "(array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
        "         0.01538462,  0.02051282,  0.03076923,  0.03589744,  0.04102564,\n",
        "         0.04615385,  0.05128205,  0.05641026,  0.06153846,  0.06666667,\n",
        "         0.07179487,  0.07692308,  0.08205128,  0.08717949,  0.09230769,\n",
        "         0.0974359 ,  0.1025641 ,  0.10769231,  0.11282051,  0.11794872,\n",
        "         0.12307692,  0.12820513,  0.13333333,  0.13846154,  0.14358974,\n",
        "         0.14871795,  0.15384615,  0.15897436,  0.16410256,  0.16923077,\n",
        "         0.17435897,  0.17948718,  0.18461538,  0.18974359,  0.19487179,\n",
        "         0.2       ,  0.20512821,  0.21025641,  0.21538462,  0.22051282,\n",
        "         0.22564103,  0.23076923,  0.23589744,  0.24102564,  0.24615385,\n",
        "         0.25128205,  0.25641026,  0.26153846,  0.26666667,  0.27179487,\n",
        "         0.27692308,  0.28205128,  0.28717949,  0.29230769,  0.2974359 ,\n",
        "         0.3025641 ,  0.30769231,  0.31282051,  0.31794872,  0.32307692,\n",
        "         0.32820513,  0.33333333,  0.33846154,  0.34358974,  0.34871795,\n",
        "         0.35384615,  0.35897436,  0.36410256,  0.36923077,  0.37435897,\n",
        "         0.37948718,  0.38461538,  0.38974359,  0.39487179,  0.4       ,\n",
        "         0.40512821,  0.41025641,  0.41538462,  0.42051282,  0.42564103,\n",
        "         0.43076923,  0.43589744,  0.44102564,  0.44615385,  0.45128205,\n",
        "         0.45641026,  0.46153846,  0.46666667,  0.47179487,  0.47692308,\n",
        "         0.48205128,  0.48717949,  0.49230769,  0.4974359 ,  0.5025641 ,\n",
        "         0.50769231,  0.51282051,  0.51794872,  0.52307692,  0.52820513,\n",
        "         0.53333333,  0.53846154,  0.54358974,  0.54871795,  0.55384615,\n",
        "         0.55897436,  0.56410256,  0.56923077,  0.57435897,  0.57948718,\n",
        "         0.58461538,  0.58974359,  0.59487179,  0.6       ,  0.60512821,\n",
        "         0.61025641,  0.61538462,  0.62051282,  0.62564103,  0.63076923,\n",
        "         0.63589744,  0.64102564,  0.64615385,  0.65128205,  0.65641026,\n",
        "         0.66153846,  0.66666667,  0.67179487,  0.67692308,  0.68205128,\n",
        "         0.68717949,  0.69230769,  0.6974359 ,  0.7025641 ,  0.70769231,\n",
        "         0.71282051,  0.71794872,  0.72307692,  0.72820513,  0.73333333,\n",
        "         0.73846154,  0.74358974,  0.74871795,  0.75384615,  0.75897436,\n",
        "         0.76410256,  0.76923077,  0.77435897,  0.77948718,  0.78461538,\n",
        "         0.78974359,  0.8       ,  0.80512821,  0.81025641,  0.81538462,\n",
        "         0.82051282,  0.82564103,  0.83076923,  0.83589744,  0.84102564,\n",
        "         0.84615385,  0.85128205,  0.85641026,  0.86153846,  0.86666667,\n",
        "         0.87179487,  0.87692308,  0.88205128,  0.88717949,  0.89230769,\n",
        "         0.9025641 ,  0.90769231,  1.        ]),\n",
        " array([ 0.2       ,  0.2195122 ,  0.22439024,  0.22926829,  0.23414634,\n",
        "         0.24878049,  0.25853659,  0.27317073,  0.27804878,  0.28292683,\n",
        "         0.28780488,  0.29268293,  0.29756098,  0.30243902,  0.30731707,\n",
        "         0.31219512,  0.32195122,  0.32682927,  0.33170732,  0.33658537,\n",
        "         0.34146341,  0.34634146,  0.35121951,  0.35609756,  0.36097561,\n",
        "         0.37073171,  0.37560976,  0.3804878 ,  0.38536585,  0.3902439 ,\n",
        "         0.39512195,  0.4       ,  0.40487805,  0.4097561 ,  0.41463415,\n",
        "         0.4195122 ,  0.42439024,  0.42926829,  0.43414634,  0.43902439,\n",
        "         0.44390244,  0.44878049,  0.45365854,  0.45853659,  0.46341463,\n",
        "         0.46829268,  0.47317073,  0.47804878,  0.48292683,  0.48780488,\n",
        "         0.49268293,  0.49756098,  0.50243902,  0.50731707,  0.51219512,\n",
        "         0.51707317,  0.52195122,  0.52682927,  0.53170732,  0.53658537,\n",
        "         0.54146341,  0.54634146,  0.55121951,  0.55609756,  0.56097561,\n",
        "         0.56585366,  0.57073171,  0.57560976,  0.5804878 ,  0.58536585,\n",
        "         0.5902439 ,  0.59512195,  0.6       ,  0.60487805,  0.6097561 ,\n",
        "         0.61463415,  0.6195122 ,  0.62439024,  0.62926829,  0.63414634,\n",
        "         0.63902439,  0.64390244,  0.64878049,  0.65365854,  0.65853659,\n",
        "         0.66341463,  0.66829268,  0.67317073,  0.67804878,  0.68292683,\n",
        "         0.68780488,  0.69268293,  0.69756098,  0.70243902,  0.70731707,\n",
        "         0.71219512,  0.71707317,  0.72195122,  0.72682927,  0.73170732,\n",
        "         0.73658537,  0.74146341,  0.74634146,  0.75121951,  0.75609756,\n",
        "         0.76097561,  0.76585366,  0.77073171,  0.77560976,  0.7804878 ,\n",
        "         0.78536585,  0.7902439 ,  0.79512195,  0.8       ,  0.80487805,\n",
        "         0.8097561 ,  0.81463415,  0.8195122 ,  0.82439024,  0.82926829,\n",
        "         0.83414634,  0.83902439,  0.84390244,  0.84878049,  0.85365854,\n",
        "         0.85853659,  0.86341463,  0.86829268,  0.87317073,  0.87804878,\n",
        "         0.88292683,  0.88780488,  0.89268293,  0.89756098,  0.90243902,\n",
        "         0.90731707,  0.91219512,  0.91707317,  0.92195122,  0.92682927,\n",
        "         0.93170732,  0.93658537,  0.94146341,  0.94634146,  0.95121951,\n",
        "         0.95609756,  0.96097561,  0.96585366,  0.97073171,  0.97560976,\n",
        "         0.9804878 ,  0.98536585,  0.9902439 ,  0.99512195,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ,  1.        ,  1.        ,\n",
        "         1.        ,  1.        ,  1.        ]))"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "proba"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "array([[  9.95815006e-01,   4.18499426e-03],\n",
        "       [  1.46886531e-06,   9.99998531e-01],\n",
        "       [  7.05874026e-10,   9.99999999e-01],\n",
        "       [  2.15964622e-04,   9.99784035e-01],\n",
        "       [  5.24928989e-11,   1.00000000e+00],\n",
        "       [  1.72225941e-01,   8.27774059e-01],\n",
        "       [  9.99999991e-01,   9.49671778e-09],\n",
        "       [  9.99838467e-01,   1.61533035e-04],\n",
        "       [  9.03622320e-04,   9.99096378e-01],\n",
        "       [  9.99999821e-01,   1.79262329e-07],\n",
        "       [  2.78117737e-05,   9.99972188e-01],\n",
        "       [  1.99556246e-04,   9.99800444e-01],\n",
        "       [  1.16285028e-03,   9.98837150e-01],\n",
        "       [  2.22044605e-16,   1.00000000e+00],\n",
        "       [  8.62332604e-01,   1.37667396e-01],\n",
        "       [  2.14050999e-13,   1.00000000e+00],\n",
        "       [  9.99995622e-01,   4.37809921e-06],\n",
        "       [  1.26895620e-08,   9.99999987e-01],\n",
        "       [  9.98126241e-01,   1.87375947e-03],\n",
        "       [  4.17741164e-07,   9.99999582e-01],\n",
        "       [  8.45058394e-01,   1.54941606e-01],\n",
        "       [  1.96093323e-07,   9.99999804e-01],\n",
        "       [  3.97997879e-09,   9.99999996e-01],\n",
        "       [  9.94763636e-01,   5.23636447e-03],\n",
        "       [  9.99996378e-01,   3.62173675e-06],\n",
        "       [  9.77793340e-01,   2.22066603e-02],\n",
        "       [  1.28901484e-04,   9.99871099e-01],\n",
        "       [  9.22623804e-01,   7.73761960e-02],\n",
        "       [  9.96145615e-01,   3.85438503e-03],\n",
        "       [  9.99999593e-01,   4.07094600e-07],\n",
        "       [  6.12239717e-03,   9.93877603e-01],\n",
        "       [  9.99936350e-01,   6.36503395e-05],\n",
        "       [  1.30567713e-06,   9.99998694e-01],\n",
        "       [  9.99915170e-01,   8.48298010e-05],\n",
        "       [  9.99911789e-01,   8.82111709e-05],\n",
        "       [  9.95515068e-01,   4.48493231e-03],\n",
        "       [  9.99769789e-01,   2.30211204e-04],\n",
        "       [  9.99934741e-01,   6.52591219e-05],\n",
        "       [  9.54306195e-01,   4.56938054e-02],\n",
        "       [  4.69811247e-07,   9.99999530e-01],\n",
        "       [  9.99998639e-01,   1.36140828e-06],\n",
        "       [  9.99843322e-01,   1.56678071e-04],\n",
        "       [  0.00000000e+00,   1.00000000e+00],\n",
        "       [  2.58386762e-04,   9.99741613e-01],\n",
        "       [  2.59608323e-04,   9.99740392e-01],\n",
        "       [  2.45193012e-06,   9.99997548e-01],\n",
        "       [  9.95614372e-01,   4.38562762e-03],\n",
        "       [  3.19223145e-02,   9.68077685e-01],\n",
        "       [  3.51260880e-03,   9.96487391e-01],\n",
        "       [  1.00853924e-07,   9.99999899e-01],\n",
        "       [  8.42805370e-08,   9.99999916e-01],\n",
        "       [  6.74588505e-05,   9.99932541e-01],\n",
        "       [  9.87416523e-01,   1.25834775e-02],\n",
        "       [  9.99996933e-01,   3.06694787e-06],\n",
        "       [  9.78127058e-01,   2.18729419e-02],\n",
        "       [  6.31795009e-01,   3.68204991e-01],\n",
        "       [  9.99252116e-01,   7.47883851e-04],\n",
        "       [  9.98520966e-01,   1.47903378e-03],\n",
        "       [  1.85061543e-06,   9.99998149e-01],\n",
        "       [  2.22458564e-06,   9.99997775e-01],\n",
        "       [  9.99905325e-01,   9.46746219e-05],\n",
        "       [  9.86768179e-01,   1.32318207e-02],\n",
        "       [  3.87237491e-08,   9.99999961e-01],\n",
        "       [  1.17275988e-01,   8.82724012e-01],\n",
        "       [  4.35896608e-09,   9.99999996e-01],\n",
        "       [  9.98536782e-01,   1.46321790e-03],\n",
        "       [  0.00000000e+00,   1.00000000e+00],\n",
        "       [  9.99992539e-01,   7.46072138e-06],\n",
        "       [  9.97296758e-01,   2.70324206e-03],\n",
        "       [  5.55253334e-03,   9.94447467e-01],\n",
        "       [  3.53907848e-02,   9.64609215e-01],\n",
        "       [  6.43525305e-07,   9.99999356e-01],\n",
        "       [  1.00536223e-06,   9.99998995e-01],\n",
        "       [  1.60924843e-03,   9.98390752e-01],\n",
        "       [  5.77451420e-11,   1.00000000e+00],\n",
        "       [  1.75644832e-10,   1.00000000e+00],\n",
        "       [  2.70497765e-05,   9.99972950e-01],\n",
        "       [  1.86871935e-02,   9.81312807e-01],\n",
        "       [  5.41116182e-05,   9.99945888e-01],\n",
        "       [  9.63377363e-01,   3.66226368e-02],\n",
        "       [  9.99764788e-01,   2.35211918e-04],\n",
        "       [  9.25865131e-01,   7.41348689e-02],\n",
        "       [  9.99981000e-01,   1.89999978e-05],\n",
        "       [  9.66216044e-01,   3.37839559e-02],\n",
        "       [  5.37221378e-11,   1.00000000e+00],\n",
        "       [  2.22264903e-04,   9.99777735e-01],\n",
        "       [  9.41221496e-01,   5.87785039e-02],\n",
        "       [  9.99641360e-01,   3.58639721e-04],\n",
        "       [  9.99731273e-01,   2.68727373e-04],\n",
        "       [  9.91856478e-01,   8.14352209e-03],\n",
        "       [  9.95807593e-01,   4.19240719e-03],\n",
        "       [  9.99359305e-01,   6.40695247e-04],\n",
        "       [  9.98721477e-01,   1.27852284e-03],\n",
        "       [  4.08092600e-06,   9.99995919e-01],\n",
        "       [  1.40906362e-04,   9.99859094e-01],\n",
        "       [  9.97009040e-01,   2.99096019e-03],\n",
        "       [  6.78601710e-05,   9.99932140e-01],\n",
        "       [  1.40610296e-05,   9.99985939e-01],\n",
        "       [  9.90094880e-01,   9.90512009e-03],\n",
        "       [  8.81328812e-01,   1.18671188e-01],\n",
        "       [  6.68176281e-04,   9.99331824e-01],\n",
        "       [  9.99710175e-01,   2.89825499e-04],\n",
        "       [  9.99997049e-01,   2.95097738e-06],\n",
        "       [  9.99801927e-01,   1.98073080e-04],\n",
        "       [  9.78489285e-01,   2.15107151e-02],\n",
        "       [  1.53288590e-06,   9.99998467e-01],\n",
        "       [  4.44089210e-16,   1.00000000e+00],\n",
        "       [  1.17919107e-06,   9.99998821e-01],\n",
        "       [  9.92071229e-01,   7.92877079e-03],\n",
        "       [  9.76029109e-06,   9.99990240e-01],\n",
        "       [  9.79512410e-01,   2.04875903e-02],\n",
        "       [  9.69511687e-01,   3.04883134e-02],\n",
        "       [  1.03230851e-01,   8.96769149e-01],\n",
        "       [  1.58408349e-07,   9.99999842e-01],\n",
        "       [  1.00000000e+00,   1.61630241e-10],\n",
        "       [  9.99999082e-01,   9.18415015e-07],\n",
        "       [  9.99260645e-01,   7.39355264e-04],\n",
        "       [  1.60619862e-02,   9.83938014e-01],\n",
        "       [  1.13766132e-03,   9.98862339e-01],\n",
        "       [  1.09118159e-01,   8.90881841e-01],\n",
        "       [  1.53564680e-02,   9.84643532e-01],\n",
        "       [  3.33854810e-09,   9.99999997e-01],\n",
        "       [  6.08576266e-05,   9.99939142e-01],\n",
        "       [  1.32233870e-02,   9.86776613e-01],\n",
        "       [  9.75242438e-01,   2.47575621e-02],\n",
        "       [  1.05345557e-07,   9.99999895e-01],\n",
        "       [  1.53156062e-01,   8.46843938e-01],\n",
        "       [  1.29787028e-01,   8.70212972e-01],\n",
        "       [  7.50392921e-04,   9.99249607e-01],\n",
        "       [  8.45058394e-01,   1.54941606e-01],\n",
        "       [  4.31627307e-03,   9.95683727e-01],\n",
        "       [  9.66012115e-01,   3.39878854e-02],\n",
        "       [  9.99977584e-01,   2.24155746e-05],\n",
        "       [  1.00000000e+00,   5.18574791e-12],\n",
        "       [  9.97670247e-01,   2.32975305e-03],\n",
        "       [  2.07690594e-05,   9.99979231e-01],\n",
        "       [  1.08998370e-04,   9.99891002e-01],\n",
        "       [  8.11482855e-01,   1.88517145e-01],\n",
        "       [  2.34228064e-04,   9.99765772e-01],\n",
        "       [  9.99999869e-01,   1.30782509e-07],\n",
        "       [  9.99844612e-01,   1.55388190e-04],\n",
        "       [  9.99999981e-01,   1.89437011e-08],\n",
        "       [  2.87029313e-02,   9.71297069e-01],\n",
        "       [  2.64011035e-13,   1.00000000e+00],\n",
        "       [  9.99932864e-01,   6.71363353e-05],\n",
        "       [  2.40933308e-06,   9.99997591e-01],\n",
        "       [  9.28501720e-12,   1.00000000e+00],\n",
        "       [  1.76971252e-05,   9.99982303e-01],\n",
        "       [  1.41147963e-01,   8.58852037e-01],\n",
        "       [  2.66155378e-01,   7.33844622e-01],\n",
        "       [  9.98360827e-01,   1.63917284e-03],\n",
        "       [  9.99911523e-01,   8.84767441e-05],\n",
        "       [  6.48531050e-07,   9.99999351e-01],\n",
        "       [  2.26566930e-06,   9.99997734e-01],\n",
        "       [  9.50221553e-01,   4.97784471e-02],\n",
        "       [  7.31640591e-03,   9.92683594e-01],\n",
        "       [  4.19470610e-02,   9.58052939e-01],\n",
        "       [  7.21716020e-11,   1.00000000e+00],\n",
        "       [  9.99999555e-01,   4.44629182e-07],\n",
        "       [  9.16962667e-07,   9.99999083e-01],\n",
        "       [  5.84440669e-04,   9.99415559e-01],\n",
        "       [  6.05778748e-04,   9.99394221e-01],\n",
        "       [  3.61081206e-06,   9.99996389e-01],\n",
        "       [  9.99999980e-01,   2.02167739e-08],\n",
        "       [  9.94719871e-01,   5.28012916e-03],\n",
        "       [  1.87501700e-04,   9.99812498e-01],\n",
        "       [  9.99987888e-01,   1.21122702e-05],\n",
        "       [  9.97280171e-01,   2.71982871e-03],\n",
        "       [  5.26066887e-01,   4.73933113e-01],\n",
        "       [  6.31795009e-01,   3.68204991e-01],\n",
        "       [  9.92760484e-01,   7.23951624e-03],\n",
        "       [  2.19602114e-13,   1.00000000e+00],\n",
        "       [  9.86806228e-01,   1.31937717e-02],\n",
        "       [  5.27231214e-07,   9.99999473e-01],\n",
        "       [  9.81112765e-01,   1.88872349e-02],\n",
        "       [  9.99946654e-01,   5.33460985e-05],\n",
        "       [  9.83047766e-01,   1.69522345e-02],\n",
        "       [  6.31795009e-01,   3.68204991e-01],\n",
        "       [  9.99083492e-01,   9.16507993e-04],\n",
        "       [  5.51080132e-04,   9.99448920e-01],\n",
        "       [  9.99848906e-01,   1.51093877e-04],\n",
        "       [  1.17448917e-02,   9.88255108e-01],\n",
        "       [  9.94311325e-01,   5.68867535e-03],\n",
        "       [  1.33763001e-10,   1.00000000e+00],\n",
        "       [  3.71305209e-11,   1.00000000e+00],\n",
        "       [  7.15199848e-07,   9.99999285e-01],\n",
        "       [  7.59157214e-03,   9.92408428e-01],\n",
        "       [  1.20935479e-02,   9.87906452e-01],\n",
        "       [  9.99768505e-01,   2.31494947e-04],\n",
        "       [  9.53601638e-01,   4.63983617e-02],\n",
        "       [  9.98789671e-01,   1.21032919e-03],\n",
        "       [  3.16060756e-08,   9.99999968e-01],\n",
        "       [  2.16577980e-07,   9.99999783e-01],\n",
        "       [  5.04923895e-08,   9.99999950e-01],\n",
        "       [  9.99997052e-01,   2.94761949e-06],\n",
        "       [  9.99992390e-01,   7.60974578e-06],\n",
        "       [  9.97680381e-01,   2.31961877e-03],\n",
        "       [  9.49383763e-01,   5.06162366e-02],\n",
        "       [  9.99715114e-01,   2.84886375e-04],\n",
        "       [  9.80644316e-01,   1.93556845e-02],\n",
        "       [  9.69153220e-01,   3.08467797e-02],\n",
        "       [  5.55111512e-15,   1.00000000e+00],\n",
        "       [  1.62342957e-05,   9.99983766e-01],\n",
        "       [  1.97842677e-03,   9.98021573e-01],\n",
        "       [  1.18901434e-05,   9.99988110e-01],\n",
        "       [  9.99553161e-01,   4.46839334e-04],\n",
        "       [  9.27271645e-02,   9.07272835e-01],\n",
        "       [  4.24955229e-04,   9.99575045e-01],\n",
        "       [  6.33826760e-03,   9.93661732e-01],\n",
        "       [  9.61465646e-01,   3.85343537e-02],\n",
        "       [  1.26398891e-11,   1.00000000e+00],\n",
        "       [  2.68820054e-07,   9.99999731e-01],\n",
        "       [  9.97189273e-01,   2.81072719e-03],\n",
        "       [  9.99982289e-01,   1.77114096e-05],\n",
        "       [  9.46035615e-01,   5.39643847e-02],\n",
        "       [  9.70753025e-01,   2.92469751e-02],\n",
        "       [  9.99220484e-01,   7.79515811e-04],\n",
        "       [  9.99973162e-01,   2.68383335e-05],\n",
        "       [  6.16324731e-02,   9.38367527e-01],\n",
        "       [  9.81591143e-01,   1.84088569e-02],\n",
        "       [  1.65548645e-02,   9.83445136e-01],\n",
        "       [  5.89482788e-02,   9.41051721e-01],\n",
        "       [  0.00000000e+00,   1.00000000e+00],\n",
        "       [  9.63741824e-01,   3.62581761e-02],\n",
        "       [  3.80728704e-04,   9.99619271e-01],\n",
        "       [  9.99920262e-01,   7.97377981e-05],\n",
        "       [  9.78728283e-01,   2.12717165e-02],\n",
        "       [  3.37815671e-02,   9.66218433e-01],\n",
        "       [  9.99994506e-01,   5.49446766e-06],\n",
        "       [  3.62632093e-06,   9.99996374e-01],\n",
        "       [  3.80324699e-03,   9.96196753e-01],\n",
        "       [  1.47719703e-07,   9.99999852e-01],\n",
        "       [  1.50512344e-07,   9.99999849e-01],\n",
        "       [  9.99998995e-01,   1.00474237e-06],\n",
        "       [  9.99997276e-01,   2.72433495e-06],\n",
        "       [  1.21354331e-02,   9.87864567e-01],\n",
        "       [  9.78446914e-01,   2.15530861e-02],\n",
        "       [  1.88069627e-09,   9.99999998e-01],\n",
        "       [  1.08735243e-12,   1.00000000e+00],\n",
        "       [  4.76106014e-02,   9.52389399e-01],\n",
        "       [  2.19380070e-13,   1.00000000e+00],\n",
        "       [  9.98782341e-01,   1.21765865e-03],\n",
        "       [  9.99898942e-01,   1.01057528e-04],\n",
        "       [  5.76270423e-05,   9.99942373e-01],\n",
        "       [  9.99370770e-01,   6.29230265e-04],\n",
        "       [  9.99999996e-01,   4.09737660e-09],\n",
        "       [  1.96761595e-08,   9.99999980e-01],\n",
        "       [  9.79272052e-01,   2.07279485e-02],\n",
        "       [  6.39798444e-04,   9.99360202e-01],\n",
        "       [  6.17207802e-03,   9.93827922e-01],\n",
        "       [  9.99999857e-01,   1.42730096e-07],\n",
        "       [  9.92335106e-01,   7.66489364e-03],\n",
        "       [  1.23007826e-10,   1.00000000e+00],\n",
        "       [  4.12409206e-05,   9.99958759e-01],\n",
        "       [  1.06383837e-07,   9.99999894e-01],\n",
        "       [  2.82172685e-02,   9.71782731e-01],\n",
        "       [  8.96246732e-09,   9.99999991e-01],\n",
        "       [  4.07557053e-03,   9.95924429e-01],\n",
        "       [  9.96827097e-01,   3.17290323e-03],\n",
        "       [  1.00000000e+00,   3.42747106e-10],\n",
        "       [  6.45151131e-05,   9.99935485e-01],\n",
        "       [  4.01882476e-03,   9.95981175e-01],\n",
        "       [  9.99905497e-01,   9.45034797e-05],\n",
        "       [  4.01055704e-06,   9.99995989e-01],\n",
        "       [  4.40318039e-06,   9.99995597e-01],\n",
        "       [  1.84226636e-05,   9.99981577e-01],\n",
        "       [  9.99936127e-01,   6.38730147e-05],\n",
        "       [  1.20185487e-03,   9.98798145e-01],\n",
        "       [  5.41739360e-06,   9.99994583e-01],\n",
        "       [  3.01394202e-02,   9.69860580e-01],\n",
        "       [  9.99979523e-01,   2.04766328e-05],\n",
        "       [  4.17033239e-02,   9.58296676e-01],\n",
        "       [  9.99996765e-01,   3.23472375e-06],\n",
        "       [  1.91058691e-04,   9.99808941e-01],\n",
        "       [  1.06494813e-11,   1.00000000e+00],\n",
        "       [  9.99854062e-01,   1.45938299e-04],\n",
        "       [  9.93557092e-01,   6.44290812e-03],\n",
        "       [  2.94908098e-10,   1.00000000e+00],\n",
        "       [  9.93540022e-01,   6.45997786e-03],\n",
        "       [  1.48814019e-06,   9.99998512e-01],\n",
        "       [  9.99921442e-01,   7.85579148e-05],\n",
        "       [  9.04850884e-06,   9.99990951e-01],\n",
        "       [  9.99998076e-01,   1.92380623e-06],\n",
        "       [  3.70241625e-03,   9.96297584e-01],\n",
        "       [  2.14561875e-04,   9.99785438e-01],\n",
        "       [  1.06086175e-05,   9.99989391e-01],\n",
        "       [  3.23064686e-10,   1.00000000e+00],\n",
        "       [  9.99993499e-01,   6.50098112e-06],\n",
        "       [  4.36830572e-11,   1.00000000e+00],\n",
        "       [  8.11176265e-05,   9.99918882e-01],\n",
        "       [  0.00000000e+00,   1.00000000e+00],\n",
        "       [  9.97674253e-01,   2.32574654e-03],\n",
        "       [  2.89121559e-03,   9.97108784e-01],\n",
        "       [  9.93622085e-01,   6.37791466e-03],\n",
        "       [  2.64669944e-05,   9.99973533e-01],\n",
        "       [  9.99999998e-01,   2.40888835e-09],\n",
        "       [  9.60071758e-01,   3.99282419e-02],\n",
        "       [  9.99998526e-01,   1.47438154e-06],\n",
        "       [  2.28540875e-09,   9.99999998e-01],\n",
        "       [  9.99999993e-01,   6.90698282e-09],\n",
        "       [  9.99997092e-01,   2.90774513e-06],\n",
        "       [  3.54929692e-02,   9.64507031e-01],\n",
        "       [  9.77235764e-02,   9.02276424e-01],\n",
        "       [  2.78268881e-02,   9.72173112e-01],\n",
        "       [  9.99999672e-01,   3.27510617e-07],\n",
        "       [  1.12485399e-09,   9.99999999e-01],\n",
        "       [  6.67386760e-05,   9.99933261e-01],\n",
        "       [  9.99997181e-01,   2.81946781e-06],\n",
        "       [  7.48302080e-05,   9.99925170e-01],\n",
        "       [  1.52972327e-06,   9.99998470e-01],\n",
        "       [  1.26337891e-01,   8.73662109e-01],\n",
        "       [  9.92751276e-01,   7.24872392e-03],\n",
        "       [  9.99951666e-01,   4.83340955e-05],\n",
        "       [  5.22702971e-05,   9.99947730e-01],\n",
        "       [  1.59592302e-02,   9.84040770e-01],\n",
        "       [  9.96837778e-01,   3.16222181e-03],\n",
        "       [  9.99999911e-01,   8.88391911e-08],\n",
        "       [  9.99891837e-01,   1.08162981e-04],\n",
        "       [  9.81860974e-01,   1.81390256e-02],\n",
        "       [  8.83579949e-01,   1.16420051e-01],\n",
        "       [  4.79273134e-03,   9.95207269e-01],\n",
        "       [  9.99987720e-01,   1.22798281e-05],\n",
        "       [  9.99999998e-01,   1.59013202e-09],\n",
        "       [  3.18901804e-08,   9.99999968e-01],\n",
        "       [  6.63030460e-03,   9.93369695e-01],\n",
        "       [  4.86847007e-10,   1.00000000e+00],\n",
        "       [  9.99973075e-01,   2.69246279e-05],\n",
        "       [  1.12095902e-01,   8.87904098e-01],\n",
        "       [  9.99727987e-01,   2.72012543e-04],\n",
        "       [  8.66344217e-01,   1.33655783e-01],\n",
        "       [  9.99999997e-01,   2.70284135e-09],\n",
        "       [  6.74427935e-08,   9.99999933e-01],\n",
        "       [  1.35261458e-04,   9.99864739e-01],\n",
        "       [  9.26940223e-01,   7.30597769e-02],\n",
        "       [  4.62501328e-02,   9.53749867e-01],\n",
        "       [  9.99995644e-01,   4.35588173e-06],\n",
        "       [  9.99999480e-01,   5.19883827e-07],\n",
        "       [  9.65305063e-01,   3.46949370e-02],\n",
        "       [  9.20499102e-01,   7.95008984e-02],\n",
        "       [  9.99999984e-01,   1.59451067e-08],\n",
        "       [  1.00000000e+00,   1.86495406e-10],\n",
        "       [  9.99604203e-01,   3.95796621e-04],\n",
        "       [  2.54479474e-02,   9.74552053e-01],\n",
        "       [  2.06066097e-01,   7.93933903e-01],\n",
        "       [  2.77834178e-09,   9.99999997e-01],\n",
        "       [  9.97212805e-01,   2.78719469e-03],\n",
        "       [  9.48944092e-01,   5.10559084e-02],\n",
        "       [  9.37496058e-01,   6.25039425e-02],\n",
        "       [  1.17787899e-07,   9.99999882e-01],\n",
        "       [  1.82957790e-06,   9.99998170e-01],\n",
        "       [  9.99999978e-01,   2.20175985e-08],\n",
        "       [  9.88846080e-01,   1.11539203e-02],\n",
        "       [  1.54300244e-02,   9.84569976e-01],\n",
        "       [  9.99929486e-01,   7.05140059e-05],\n",
        "       [  1.00000000e+00,   2.73856510e-11],\n",
        "       [  9.95067837e-01,   4.93216260e-03],\n",
        "       [  9.99998249e-01,   1.75126211e-06],\n",
        "       [  9.99892009e-01,   1.07990770e-04],\n",
        "       [  9.92819562e-01,   7.18043782e-03],\n",
        "       [  1.98158022e-04,   9.99801842e-01],\n",
        "       [  9.99999913e-01,   8.68143358e-08],\n",
        "       [  9.85875226e-01,   1.41247736e-02],\n",
        "       [  9.80700218e-04,   9.99019300e-01],\n",
        "       [  1.53722231e-02,   9.84627777e-01],\n",
        "       [  9.47462507e-05,   9.99905254e-01],\n",
        "       [  9.59926232e-01,   4.00737676e-02],\n",
        "       [  7.08231971e-02,   9.29176803e-01],\n",
        "       [  4.02207124e-08,   9.99999960e-01],\n",
        "       [  9.99979156e-01,   2.08438337e-05],\n",
        "       [  9.84684689e-01,   1.53153115e-02],\n",
        "       [  5.85920845e-09,   9.99999994e-01],\n",
        "       [  5.93277772e-07,   9.99999407e-01],\n",
        "       [  9.99976229e-01,   2.37706214e-05],\n",
        "       [  9.99991648e-01,   8.35179208e-06],\n",
        "       [  2.42237341e-11,   1.00000000e+00],\n",
        "       [  9.99999962e-01,   3.77204071e-08],\n",
        "       [  4.08961405e-05,   9.99959104e-01],\n",
        "       [  6.98271189e-05,   9.99930173e-01],\n",
        "       [  6.18586656e-02,   9.38141334e-01],\n",
        "       [  1.00000000e+00,   5.74419630e-11],\n",
        "       [  9.99999901e-01,   9.89945406e-08],\n",
        "       [  9.99992080e-01,   7.91998386e-06],\n",
        "       [  9.99999351e-01,   6.48544102e-07],\n",
        "       [  6.24886118e-02,   9.37511388e-01],\n",
        "       [  9.99978948e-01,   2.10516164e-05],\n",
        "       [  3.60605445e-05,   9.99963939e-01],\n",
        "       [  4.62861710e-06,   9.99995371e-01],\n",
        "       [  9.99004128e-01,   9.95872179e-04],\n",
        "       [  1.44927017e-03,   9.98550730e-01],\n",
        "       [  1.32784639e-01,   8.67215361e-01],\n",
        "       [  9.98147235e-01,   1.85276529e-03],\n",
        "       [  8.82850217e-01,   1.17149783e-01],\n",
        "       [  9.99957703e-01,   4.22970802e-05],\n",
        "       [  1.22317268e-07,   9.99999878e-01],\n",
        "       [  2.22044605e-16,   1.00000000e+00],\n",
        "       [  9.99999984e-01,   1.59794878e-08],\n",
        "       [  9.99953400e-01,   4.65995774e-05],\n",
        "       [  9.99999995e-01,   5.02023788e-09],\n",
        "       [  2.80469952e-07,   9.99999720e-01],\n",
        "       [  1.21524324e-06,   9.99998785e-01]])"
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}